/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersUsernameImport } from './routes/users/$username'

// Create Virtual Routes

const NotFoundComponentLazyImport = createFileRoute('/notFoundComponent')()
const IndexLazyImport = createFileRoute('/')()
const ZhIndexLazyImport = createFileRoute('/zh/')()
const UsersIndexLazyImport = createFileRoute('/users/')()
const UnitIndexLazyImport = createFileRoute('/unit/')()
const TrIndexLazyImport = createFileRoute('/tr/')()
const SwIndexLazyImport = createFileRoute('/sw/')()
const SettingsIndexLazyImport = createFileRoute('/settings/')()
const PtIndexLazyImport = createFileRoute('/pt/')()
const JaIndexLazyImport = createFileRoute('/ja/')()
const ItIndexLazyImport = createFileRoute('/it/')()
const IdIndexLazyImport = createFileRoute('/id/')()
const HiIndexLazyImport = createFileRoute('/hi/')()
const FrIndexLazyImport = createFileRoute('/fr/')()
const EsIndexLazyImport = createFileRoute('/es/')()
const EnIndexLazyImport = createFileRoute('/en/')()
const ZhAlphabetLazyImport = createFileRoute('/zh/alphabet')()
const TrAlphabetLazyImport = createFileRoute('/tr/alphabet')()
const SwAlphabetLazyImport = createFileRoute('/sw/alphabet')()
const PtAlphabetLazyImport = createFileRoute('/pt/alphabet')()
const JaAlphabetLazyImport = createFileRoute('/ja/alphabet')()
const ItAlphabetLazyImport = createFileRoute('/it/alphabet')()
const IdAlphabetLazyImport = createFileRoute('/id/alphabet')()
const HiAlphabetLazyImport = createFileRoute('/hi/alphabet')()
const FrAlphabetLazyImport = createFileRoute('/fr/alphabet')()
const EsAlphabetLazyImport = createFileRoute('/es/alphabet')()
const EnPhrasesLazyImport = createFileRoute('/en/phrases')()
const EnAlphabetLazyImport = createFileRoute('/en/alphabet')()
const EnPronounsIndexLazyImport = createFileRoute('/en/pronouns/')()

// Create/Update Routes

const NotFoundComponentLazyRoute = NotFoundComponentLazyImport.update({
  id: '/notFoundComponent',
  path: '/notFoundComponent',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/notFoundComponent.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ZhIndexLazyRoute = ZhIndexLazyImport.update({
  id: '/zh/',
  path: '/zh/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/zh/index.lazy').then((d) => d.Route))

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then((d) => d.Route))

const UnitIndexLazyRoute = UnitIndexLazyImport.update({
  id: '/unit/',
  path: '/unit/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/unit/index.lazy').then((d) => d.Route))

const TrIndexLazyRoute = TrIndexLazyImport.update({
  id: '/tr/',
  path: '/tr/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tr/index.lazy').then((d) => d.Route))

const SwIndexLazyRoute = SwIndexLazyImport.update({
  id: '/sw/',
  path: '/sw/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sw/index.lazy').then((d) => d.Route))

const SettingsIndexLazyRoute = SettingsIndexLazyImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/settings/index.lazy').then((d) => d.Route),
)

const PtIndexLazyRoute = PtIndexLazyImport.update({
  id: '/pt/',
  path: '/pt/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pt/index.lazy').then((d) => d.Route))

const JaIndexLazyRoute = JaIndexLazyImport.update({
  id: '/ja/',
  path: '/ja/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ja/index.lazy').then((d) => d.Route))

const ItIndexLazyRoute = ItIndexLazyImport.update({
  id: '/it/',
  path: '/it/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/it/index.lazy').then((d) => d.Route))

const IdIndexLazyRoute = IdIndexLazyImport.update({
  id: '/id/',
  path: '/id/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/id/index.lazy').then((d) => d.Route))

const HiIndexLazyRoute = HiIndexLazyImport.update({
  id: '/hi/',
  path: '/hi/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/hi/index.lazy').then((d) => d.Route))

const FrIndexLazyRoute = FrIndexLazyImport.update({
  id: '/fr/',
  path: '/fr/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/fr/index.lazy').then((d) => d.Route))

const EsIndexLazyRoute = EsIndexLazyImport.update({
  id: '/es/',
  path: '/es/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/es/index.lazy').then((d) => d.Route))

const EnIndexLazyRoute = EnIndexLazyImport.update({
  id: '/en/',
  path: '/en/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/en/index.lazy').then((d) => d.Route))

const ZhAlphabetLazyRoute = ZhAlphabetLazyImport.update({
  id: '/zh/alphabet',
  path: '/zh/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/zh/alphabet.lazy').then((d) => d.Route))

const TrAlphabetLazyRoute = TrAlphabetLazyImport.update({
  id: '/tr/alphabet',
  path: '/tr/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tr/alphabet.lazy').then((d) => d.Route))

const SwAlphabetLazyRoute = SwAlphabetLazyImport.update({
  id: '/sw/alphabet',
  path: '/sw/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/sw/alphabet.lazy').then((d) => d.Route))

const PtAlphabetLazyRoute = PtAlphabetLazyImport.update({
  id: '/pt/alphabet',
  path: '/pt/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pt/alphabet.lazy').then((d) => d.Route))

const JaAlphabetLazyRoute = JaAlphabetLazyImport.update({
  id: '/ja/alphabet',
  path: '/ja/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ja/alphabet.lazy').then((d) => d.Route))

const ItAlphabetLazyRoute = ItAlphabetLazyImport.update({
  id: '/it/alphabet',
  path: '/it/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/it/alphabet.lazy').then((d) => d.Route))

const IdAlphabetLazyRoute = IdAlphabetLazyImport.update({
  id: '/id/alphabet',
  path: '/id/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/id/alphabet.lazy').then((d) => d.Route))

const HiAlphabetLazyRoute = HiAlphabetLazyImport.update({
  id: '/hi/alphabet',
  path: '/hi/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/hi/alphabet.lazy').then((d) => d.Route))

const FrAlphabetLazyRoute = FrAlphabetLazyImport.update({
  id: '/fr/alphabet',
  path: '/fr/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/fr/alphabet.lazy').then((d) => d.Route))

const EsAlphabetLazyRoute = EsAlphabetLazyImport.update({
  id: '/es/alphabet',
  path: '/es/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/es/alphabet.lazy').then((d) => d.Route))

const EnPhrasesLazyRoute = EnPhrasesLazyImport.update({
  id: '/en/phrases',
  path: '/en/phrases',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/en/phrases.lazy').then((d) => d.Route))

const EnAlphabetLazyRoute = EnAlphabetLazyImport.update({
  id: '/en/alphabet',
  path: '/en/alphabet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/en/alphabet.lazy').then((d) => d.Route))

const UsersUsernameRoute = UsersUsernameImport.update({
  id: '/users/$username',
  path: '/users/$username',
  getParentRoute: () => rootRoute,
} as any)

const EnPronounsIndexLazyRoute = EnPronounsIndexLazyImport.update({
  id: '/en/pronouns/',
  path: '/en/pronouns/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/en/pronouns/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/notFoundComponent': {
      id: '/notFoundComponent'
      path: '/notFoundComponent'
      fullPath: '/notFoundComponent'
      preLoaderRoute: typeof NotFoundComponentLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/$username': {
      id: '/users/$username'
      path: '/users/$username'
      fullPath: '/users/$username'
      preLoaderRoute: typeof UsersUsernameImport
      parentRoute: typeof rootRoute
    }
    '/en/alphabet': {
      id: '/en/alphabet'
      path: '/en/alphabet'
      fullPath: '/en/alphabet'
      preLoaderRoute: typeof EnAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/en/phrases': {
      id: '/en/phrases'
      path: '/en/phrases'
      fullPath: '/en/phrases'
      preLoaderRoute: typeof EnPhrasesLazyImport
      parentRoute: typeof rootRoute
    }
    '/es/alphabet': {
      id: '/es/alphabet'
      path: '/es/alphabet'
      fullPath: '/es/alphabet'
      preLoaderRoute: typeof EsAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/fr/alphabet': {
      id: '/fr/alphabet'
      path: '/fr/alphabet'
      fullPath: '/fr/alphabet'
      preLoaderRoute: typeof FrAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/hi/alphabet': {
      id: '/hi/alphabet'
      path: '/hi/alphabet'
      fullPath: '/hi/alphabet'
      preLoaderRoute: typeof HiAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/id/alphabet': {
      id: '/id/alphabet'
      path: '/id/alphabet'
      fullPath: '/id/alphabet'
      preLoaderRoute: typeof IdAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/it/alphabet': {
      id: '/it/alphabet'
      path: '/it/alphabet'
      fullPath: '/it/alphabet'
      preLoaderRoute: typeof ItAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/ja/alphabet': {
      id: '/ja/alphabet'
      path: '/ja/alphabet'
      fullPath: '/ja/alphabet'
      preLoaderRoute: typeof JaAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/pt/alphabet': {
      id: '/pt/alphabet'
      path: '/pt/alphabet'
      fullPath: '/pt/alphabet'
      preLoaderRoute: typeof PtAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/sw/alphabet': {
      id: '/sw/alphabet'
      path: '/sw/alphabet'
      fullPath: '/sw/alphabet'
      preLoaderRoute: typeof SwAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/tr/alphabet': {
      id: '/tr/alphabet'
      path: '/tr/alphabet'
      fullPath: '/tr/alphabet'
      preLoaderRoute: typeof TrAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/zh/alphabet': {
      id: '/zh/alphabet'
      path: '/zh/alphabet'
      fullPath: '/zh/alphabet'
      preLoaderRoute: typeof ZhAlphabetLazyImport
      parentRoute: typeof rootRoute
    }
    '/en/': {
      id: '/en/'
      path: '/en'
      fullPath: '/en'
      preLoaderRoute: typeof EnIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/es/': {
      id: '/es/'
      path: '/es'
      fullPath: '/es'
      preLoaderRoute: typeof EsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/fr/': {
      id: '/fr/'
      path: '/fr'
      fullPath: '/fr'
      preLoaderRoute: typeof FrIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/hi/': {
      id: '/hi/'
      path: '/hi'
      fullPath: '/hi'
      preLoaderRoute: typeof HiIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/id/': {
      id: '/id/'
      path: '/id'
      fullPath: '/id'
      preLoaderRoute: typeof IdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/it/': {
      id: '/it/'
      path: '/it'
      fullPath: '/it'
      preLoaderRoute: typeof ItIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/ja/': {
      id: '/ja/'
      path: '/ja'
      fullPath: '/ja'
      preLoaderRoute: typeof JaIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/pt/': {
      id: '/pt/'
      path: '/pt'
      fullPath: '/pt'
      preLoaderRoute: typeof PtIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/sw/': {
      id: '/sw/'
      path: '/sw'
      fullPath: '/sw'
      preLoaderRoute: typeof SwIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/tr/': {
      id: '/tr/'
      path: '/tr'
      fullPath: '/tr'
      preLoaderRoute: typeof TrIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/unit/': {
      id: '/unit/'
      path: '/unit'
      fullPath: '/unit'
      preLoaderRoute: typeof UnitIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/zh/': {
      id: '/zh/'
      path: '/zh'
      fullPath: '/zh'
      preLoaderRoute: typeof ZhIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/en/pronouns/': {
      id: '/en/pronouns/'
      path: '/en/pronouns'
      fullPath: '/en/pronouns'
      preLoaderRoute: typeof EnPronounsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/notFoundComponent': typeof NotFoundComponentLazyRoute
  '/users/$username': typeof UsersUsernameRoute
  '/en/alphabet': typeof EnAlphabetLazyRoute
  '/en/phrases': typeof EnPhrasesLazyRoute
  '/es/alphabet': typeof EsAlphabetLazyRoute
  '/fr/alphabet': typeof FrAlphabetLazyRoute
  '/hi/alphabet': typeof HiAlphabetLazyRoute
  '/id/alphabet': typeof IdAlphabetLazyRoute
  '/it/alphabet': typeof ItAlphabetLazyRoute
  '/ja/alphabet': typeof JaAlphabetLazyRoute
  '/pt/alphabet': typeof PtAlphabetLazyRoute
  '/sw/alphabet': typeof SwAlphabetLazyRoute
  '/tr/alphabet': typeof TrAlphabetLazyRoute
  '/zh/alphabet': typeof ZhAlphabetLazyRoute
  '/en': typeof EnIndexLazyRoute
  '/es': typeof EsIndexLazyRoute
  '/fr': typeof FrIndexLazyRoute
  '/hi': typeof HiIndexLazyRoute
  '/id': typeof IdIndexLazyRoute
  '/it': typeof ItIndexLazyRoute
  '/ja': typeof JaIndexLazyRoute
  '/pt': typeof PtIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/sw': typeof SwIndexLazyRoute
  '/tr': typeof TrIndexLazyRoute
  '/unit': typeof UnitIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
  '/zh': typeof ZhIndexLazyRoute
  '/en/pronouns': typeof EnPronounsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/notFoundComponent': typeof NotFoundComponentLazyRoute
  '/users/$username': typeof UsersUsernameRoute
  '/en/alphabet': typeof EnAlphabetLazyRoute
  '/en/phrases': typeof EnPhrasesLazyRoute
  '/es/alphabet': typeof EsAlphabetLazyRoute
  '/fr/alphabet': typeof FrAlphabetLazyRoute
  '/hi/alphabet': typeof HiAlphabetLazyRoute
  '/id/alphabet': typeof IdAlphabetLazyRoute
  '/it/alphabet': typeof ItAlphabetLazyRoute
  '/ja/alphabet': typeof JaAlphabetLazyRoute
  '/pt/alphabet': typeof PtAlphabetLazyRoute
  '/sw/alphabet': typeof SwAlphabetLazyRoute
  '/tr/alphabet': typeof TrAlphabetLazyRoute
  '/zh/alphabet': typeof ZhAlphabetLazyRoute
  '/en': typeof EnIndexLazyRoute
  '/es': typeof EsIndexLazyRoute
  '/fr': typeof FrIndexLazyRoute
  '/hi': typeof HiIndexLazyRoute
  '/id': typeof IdIndexLazyRoute
  '/it': typeof ItIndexLazyRoute
  '/ja': typeof JaIndexLazyRoute
  '/pt': typeof PtIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
  '/sw': typeof SwIndexLazyRoute
  '/tr': typeof TrIndexLazyRoute
  '/unit': typeof UnitIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
  '/zh': typeof ZhIndexLazyRoute
  '/en/pronouns': typeof EnPronounsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/notFoundComponent': typeof NotFoundComponentLazyRoute
  '/users/$username': typeof UsersUsernameRoute
  '/en/alphabet': typeof EnAlphabetLazyRoute
  '/en/phrases': typeof EnPhrasesLazyRoute
  '/es/alphabet': typeof EsAlphabetLazyRoute
  '/fr/alphabet': typeof FrAlphabetLazyRoute
  '/hi/alphabet': typeof HiAlphabetLazyRoute
  '/id/alphabet': typeof IdAlphabetLazyRoute
  '/it/alphabet': typeof ItAlphabetLazyRoute
  '/ja/alphabet': typeof JaAlphabetLazyRoute
  '/pt/alphabet': typeof PtAlphabetLazyRoute
  '/sw/alphabet': typeof SwAlphabetLazyRoute
  '/tr/alphabet': typeof TrAlphabetLazyRoute
  '/zh/alphabet': typeof ZhAlphabetLazyRoute
  '/en/': typeof EnIndexLazyRoute
  '/es/': typeof EsIndexLazyRoute
  '/fr/': typeof FrIndexLazyRoute
  '/hi/': typeof HiIndexLazyRoute
  '/id/': typeof IdIndexLazyRoute
  '/it/': typeof ItIndexLazyRoute
  '/ja/': typeof JaIndexLazyRoute
  '/pt/': typeof PtIndexLazyRoute
  '/settings/': typeof SettingsIndexLazyRoute
  '/sw/': typeof SwIndexLazyRoute
  '/tr/': typeof TrIndexLazyRoute
  '/unit/': typeof UnitIndexLazyRoute
  '/users/': typeof UsersIndexLazyRoute
  '/zh/': typeof ZhIndexLazyRoute
  '/en/pronouns/': typeof EnPronounsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notFoundComponent'
    | '/users/$username'
    | '/en/alphabet'
    | '/en/phrases'
    | '/es/alphabet'
    | '/fr/alphabet'
    | '/hi/alphabet'
    | '/id/alphabet'
    | '/it/alphabet'
    | '/ja/alphabet'
    | '/pt/alphabet'
    | '/sw/alphabet'
    | '/tr/alphabet'
    | '/zh/alphabet'
    | '/en'
    | '/es'
    | '/fr'
    | '/hi'
    | '/id'
    | '/it'
    | '/ja'
    | '/pt'
    | '/settings'
    | '/sw'
    | '/tr'
    | '/unit'
    | '/users'
    | '/zh'
    | '/en/pronouns'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notFoundComponent'
    | '/users/$username'
    | '/en/alphabet'
    | '/en/phrases'
    | '/es/alphabet'
    | '/fr/alphabet'
    | '/hi/alphabet'
    | '/id/alphabet'
    | '/it/alphabet'
    | '/ja/alphabet'
    | '/pt/alphabet'
    | '/sw/alphabet'
    | '/tr/alphabet'
    | '/zh/alphabet'
    | '/en'
    | '/es'
    | '/fr'
    | '/hi'
    | '/id'
    | '/it'
    | '/ja'
    | '/pt'
    | '/settings'
    | '/sw'
    | '/tr'
    | '/unit'
    | '/users'
    | '/zh'
    | '/en/pronouns'
  id:
    | '__root__'
    | '/'
    | '/notFoundComponent'
    | '/users/$username'
    | '/en/alphabet'
    | '/en/phrases'
    | '/es/alphabet'
    | '/fr/alphabet'
    | '/hi/alphabet'
    | '/id/alphabet'
    | '/it/alphabet'
    | '/ja/alphabet'
    | '/pt/alphabet'
    | '/sw/alphabet'
    | '/tr/alphabet'
    | '/zh/alphabet'
    | '/en/'
    | '/es/'
    | '/fr/'
    | '/hi/'
    | '/id/'
    | '/it/'
    | '/ja/'
    | '/pt/'
    | '/settings/'
    | '/sw/'
    | '/tr/'
    | '/unit/'
    | '/users/'
    | '/zh/'
    | '/en/pronouns/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NotFoundComponentLazyRoute: typeof NotFoundComponentLazyRoute
  UsersUsernameRoute: typeof UsersUsernameRoute
  EnAlphabetLazyRoute: typeof EnAlphabetLazyRoute
  EnPhrasesLazyRoute: typeof EnPhrasesLazyRoute
  EsAlphabetLazyRoute: typeof EsAlphabetLazyRoute
  FrAlphabetLazyRoute: typeof FrAlphabetLazyRoute
  HiAlphabetLazyRoute: typeof HiAlphabetLazyRoute
  IdAlphabetLazyRoute: typeof IdAlphabetLazyRoute
  ItAlphabetLazyRoute: typeof ItAlphabetLazyRoute
  JaAlphabetLazyRoute: typeof JaAlphabetLazyRoute
  PtAlphabetLazyRoute: typeof PtAlphabetLazyRoute
  SwAlphabetLazyRoute: typeof SwAlphabetLazyRoute
  TrAlphabetLazyRoute: typeof TrAlphabetLazyRoute
  ZhAlphabetLazyRoute: typeof ZhAlphabetLazyRoute
  EnIndexLazyRoute: typeof EnIndexLazyRoute
  EsIndexLazyRoute: typeof EsIndexLazyRoute
  FrIndexLazyRoute: typeof FrIndexLazyRoute
  HiIndexLazyRoute: typeof HiIndexLazyRoute
  IdIndexLazyRoute: typeof IdIndexLazyRoute
  ItIndexLazyRoute: typeof ItIndexLazyRoute
  JaIndexLazyRoute: typeof JaIndexLazyRoute
  PtIndexLazyRoute: typeof PtIndexLazyRoute
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute
  SwIndexLazyRoute: typeof SwIndexLazyRoute
  TrIndexLazyRoute: typeof TrIndexLazyRoute
  UnitIndexLazyRoute: typeof UnitIndexLazyRoute
  UsersIndexLazyRoute: typeof UsersIndexLazyRoute
  ZhIndexLazyRoute: typeof ZhIndexLazyRoute
  EnPronounsIndexLazyRoute: typeof EnPronounsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NotFoundComponentLazyRoute: NotFoundComponentLazyRoute,
  UsersUsernameRoute: UsersUsernameRoute,
  EnAlphabetLazyRoute: EnAlphabetLazyRoute,
  EnPhrasesLazyRoute: EnPhrasesLazyRoute,
  EsAlphabetLazyRoute: EsAlphabetLazyRoute,
  FrAlphabetLazyRoute: FrAlphabetLazyRoute,
  HiAlphabetLazyRoute: HiAlphabetLazyRoute,
  IdAlphabetLazyRoute: IdAlphabetLazyRoute,
  ItAlphabetLazyRoute: ItAlphabetLazyRoute,
  JaAlphabetLazyRoute: JaAlphabetLazyRoute,
  PtAlphabetLazyRoute: PtAlphabetLazyRoute,
  SwAlphabetLazyRoute: SwAlphabetLazyRoute,
  TrAlphabetLazyRoute: TrAlphabetLazyRoute,
  ZhAlphabetLazyRoute: ZhAlphabetLazyRoute,
  EnIndexLazyRoute: EnIndexLazyRoute,
  EsIndexLazyRoute: EsIndexLazyRoute,
  FrIndexLazyRoute: FrIndexLazyRoute,
  HiIndexLazyRoute: HiIndexLazyRoute,
  IdIndexLazyRoute: IdIndexLazyRoute,
  ItIndexLazyRoute: ItIndexLazyRoute,
  JaIndexLazyRoute: JaIndexLazyRoute,
  PtIndexLazyRoute: PtIndexLazyRoute,
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
  SwIndexLazyRoute: SwIndexLazyRoute,
  TrIndexLazyRoute: TrIndexLazyRoute,
  UnitIndexLazyRoute: UnitIndexLazyRoute,
  UsersIndexLazyRoute: UsersIndexLazyRoute,
  ZhIndexLazyRoute: ZhIndexLazyRoute,
  EnPronounsIndexLazyRoute: EnPronounsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notFoundComponent",
        "/users/$username",
        "/en/alphabet",
        "/en/phrases",
        "/es/alphabet",
        "/fr/alphabet",
        "/hi/alphabet",
        "/id/alphabet",
        "/it/alphabet",
        "/ja/alphabet",
        "/pt/alphabet",
        "/sw/alphabet",
        "/tr/alphabet",
        "/zh/alphabet",
        "/en/",
        "/es/",
        "/fr/",
        "/hi/",
        "/id/",
        "/it/",
        "/ja/",
        "/pt/",
        "/settings/",
        "/sw/",
        "/tr/",
        "/unit/",
        "/users/",
        "/zh/",
        "/en/pronouns/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/notFoundComponent": {
      "filePath": "notFoundComponent.lazy.tsx"
    },
    "/users/$username": {
      "filePath": "users/$username.tsx"
    },
    "/en/alphabet": {
      "filePath": "en/alphabet.lazy.tsx"
    },
    "/en/phrases": {
      "filePath": "en/phrases.lazy.tsx"
    },
    "/es/alphabet": {
      "filePath": "es/alphabet.lazy.tsx"
    },
    "/fr/alphabet": {
      "filePath": "fr/alphabet.lazy.tsx"
    },
    "/hi/alphabet": {
      "filePath": "hi/alphabet.lazy.tsx"
    },
    "/id/alphabet": {
      "filePath": "id/alphabet.lazy.tsx"
    },
    "/it/alphabet": {
      "filePath": "it/alphabet.lazy.tsx"
    },
    "/ja/alphabet": {
      "filePath": "ja/alphabet.lazy.tsx"
    },
    "/pt/alphabet": {
      "filePath": "pt/alphabet.lazy.tsx"
    },
    "/sw/alphabet": {
      "filePath": "sw/alphabet.lazy.tsx"
    },
    "/tr/alphabet": {
      "filePath": "tr/alphabet.lazy.tsx"
    },
    "/zh/alphabet": {
      "filePath": "zh/alphabet.lazy.tsx"
    },
    "/en/": {
      "filePath": "en/index.lazy.tsx"
    },
    "/es/": {
      "filePath": "es/index.lazy.tsx"
    },
    "/fr/": {
      "filePath": "fr/index.lazy.tsx"
    },
    "/hi/": {
      "filePath": "hi/index.lazy.tsx"
    },
    "/id/": {
      "filePath": "id/index.lazy.tsx"
    },
    "/it/": {
      "filePath": "it/index.lazy.tsx"
    },
    "/ja/": {
      "filePath": "ja/index.lazy.tsx"
    },
    "/pt/": {
      "filePath": "pt/index.lazy.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.lazy.tsx"
    },
    "/sw/": {
      "filePath": "sw/index.lazy.tsx"
    },
    "/tr/": {
      "filePath": "tr/index.lazy.tsx"
    },
    "/unit/": {
      "filePath": "unit/index.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    },
    "/zh/": {
      "filePath": "zh/index.lazy.tsx"
    },
    "/en/pronouns/": {
      "filePath": "en/pronouns/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
