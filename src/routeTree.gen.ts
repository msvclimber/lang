/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersUsernameImport } from './routes/users/$username'

// Create Virtual Routes

const NotFoundComponentLazyImport = createFileRoute('/notFoundComponent')()
const IndexLazyImport = createFileRoute('/')()
const ZhIndexLazyImport = createFileRoute('/zh/')()
const UsersIndexLazyImport = createFileRoute('/users/')()
const UnitIndexLazyImport = createFileRoute('/unit/')()
const PtIndexLazyImport = createFileRoute('/pt/')()
const PronounsIndexLazyImport = createFileRoute('/pronouns/')()
const JaIndexLazyImport = createFileRoute('/ja/')()
const ItIndexLazyImport = createFileRoute('/it/')()
const FrIndexLazyImport = createFileRoute('/fr/')()
const EsIndexLazyImport = createFileRoute('/es/')()
const EnIndexLazyImport = createFileRoute('/en/')()
const EnPhrasesLazyImport = createFileRoute('/en/phrases')()

// Create/Update Routes

const NotFoundComponentLazyRoute = NotFoundComponentLazyImport.update({
  id: '/notFoundComponent',
  path: '/notFoundComponent',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/notFoundComponent.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ZhIndexLazyRoute = ZhIndexLazyImport.update({
  id: '/zh/',
  path: '/zh/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/zh/index.lazy').then((d) => d.Route))

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then((d) => d.Route))

const UnitIndexLazyRoute = UnitIndexLazyImport.update({
  id: '/unit/',
  path: '/unit/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/unit/index.lazy').then((d) => d.Route))

const PtIndexLazyRoute = PtIndexLazyImport.update({
  id: '/pt/',
  path: '/pt/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pt/index.lazy').then((d) => d.Route))

const PronounsIndexLazyRoute = PronounsIndexLazyImport.update({
  id: '/pronouns/',
  path: '/pronouns/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/pronouns/index.lazy').then((d) => d.Route),
)

const JaIndexLazyRoute = JaIndexLazyImport.update({
  id: '/ja/',
  path: '/ja/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ja/index.lazy').then((d) => d.Route))

const ItIndexLazyRoute = ItIndexLazyImport.update({
  id: '/it/',
  path: '/it/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/it/index.lazy').then((d) => d.Route))

const FrIndexLazyRoute = FrIndexLazyImport.update({
  id: '/fr/',
  path: '/fr/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/fr/index.lazy').then((d) => d.Route))

const EsIndexLazyRoute = EsIndexLazyImport.update({
  id: '/es/',
  path: '/es/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/es/index.lazy').then((d) => d.Route))

const EnIndexLazyRoute = EnIndexLazyImport.update({
  id: '/en/',
  path: '/en/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/en/index.lazy').then((d) => d.Route))

const EnPhrasesLazyRoute = EnPhrasesLazyImport.update({
  id: '/en/phrases',
  path: '/en/phrases',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/en/phrases.lazy').then((d) => d.Route))

const UsersUsernameRoute = UsersUsernameImport.update({
  id: '/users/$username',
  path: '/users/$username',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/notFoundComponent': {
      id: '/notFoundComponent'
      path: '/notFoundComponent'
      fullPath: '/notFoundComponent'
      preLoaderRoute: typeof NotFoundComponentLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/$username': {
      id: '/users/$username'
      path: '/users/$username'
      fullPath: '/users/$username'
      preLoaderRoute: typeof UsersUsernameImport
      parentRoute: typeof rootRoute
    }
    '/en/phrases': {
      id: '/en/phrases'
      path: '/en/phrases'
      fullPath: '/en/phrases'
      preLoaderRoute: typeof EnPhrasesLazyImport
      parentRoute: typeof rootRoute
    }
    '/en/': {
      id: '/en/'
      path: '/en'
      fullPath: '/en'
      preLoaderRoute: typeof EnIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/es/': {
      id: '/es/'
      path: '/es'
      fullPath: '/es'
      preLoaderRoute: typeof EsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/fr/': {
      id: '/fr/'
      path: '/fr'
      fullPath: '/fr'
      preLoaderRoute: typeof FrIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/it/': {
      id: '/it/'
      path: '/it'
      fullPath: '/it'
      preLoaderRoute: typeof ItIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/ja/': {
      id: '/ja/'
      path: '/ja'
      fullPath: '/ja'
      preLoaderRoute: typeof JaIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/pronouns/': {
      id: '/pronouns/'
      path: '/pronouns'
      fullPath: '/pronouns'
      preLoaderRoute: typeof PronounsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/pt/': {
      id: '/pt/'
      path: '/pt'
      fullPath: '/pt'
      preLoaderRoute: typeof PtIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/unit/': {
      id: '/unit/'
      path: '/unit'
      fullPath: '/unit'
      preLoaderRoute: typeof UnitIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/zh/': {
      id: '/zh/'
      path: '/zh'
      fullPath: '/zh'
      preLoaderRoute: typeof ZhIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/notFoundComponent': typeof NotFoundComponentLazyRoute
  '/users/$username': typeof UsersUsernameRoute
  '/en/phrases': typeof EnPhrasesLazyRoute
  '/en': typeof EnIndexLazyRoute
  '/es': typeof EsIndexLazyRoute
  '/fr': typeof FrIndexLazyRoute
  '/it': typeof ItIndexLazyRoute
  '/ja': typeof JaIndexLazyRoute
  '/pronouns': typeof PronounsIndexLazyRoute
  '/pt': typeof PtIndexLazyRoute
  '/unit': typeof UnitIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
  '/zh': typeof ZhIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/notFoundComponent': typeof NotFoundComponentLazyRoute
  '/users/$username': typeof UsersUsernameRoute
  '/en/phrases': typeof EnPhrasesLazyRoute
  '/en': typeof EnIndexLazyRoute
  '/es': typeof EsIndexLazyRoute
  '/fr': typeof FrIndexLazyRoute
  '/it': typeof ItIndexLazyRoute
  '/ja': typeof JaIndexLazyRoute
  '/pronouns': typeof PronounsIndexLazyRoute
  '/pt': typeof PtIndexLazyRoute
  '/unit': typeof UnitIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
  '/zh': typeof ZhIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/notFoundComponent': typeof NotFoundComponentLazyRoute
  '/users/$username': typeof UsersUsernameRoute
  '/en/phrases': typeof EnPhrasesLazyRoute
  '/en/': typeof EnIndexLazyRoute
  '/es/': typeof EsIndexLazyRoute
  '/fr/': typeof FrIndexLazyRoute
  '/it/': typeof ItIndexLazyRoute
  '/ja/': typeof JaIndexLazyRoute
  '/pronouns/': typeof PronounsIndexLazyRoute
  '/pt/': typeof PtIndexLazyRoute
  '/unit/': typeof UnitIndexLazyRoute
  '/users/': typeof UsersIndexLazyRoute
  '/zh/': typeof ZhIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notFoundComponent'
    | '/users/$username'
    | '/en/phrases'
    | '/en'
    | '/es'
    | '/fr'
    | '/it'
    | '/ja'
    | '/pronouns'
    | '/pt'
    | '/unit'
    | '/users'
    | '/zh'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notFoundComponent'
    | '/users/$username'
    | '/en/phrases'
    | '/en'
    | '/es'
    | '/fr'
    | '/it'
    | '/ja'
    | '/pronouns'
    | '/pt'
    | '/unit'
    | '/users'
    | '/zh'
  id:
    | '__root__'
    | '/'
    | '/notFoundComponent'
    | '/users/$username'
    | '/en/phrases'
    | '/en/'
    | '/es/'
    | '/fr/'
    | '/it/'
    | '/ja/'
    | '/pronouns/'
    | '/pt/'
    | '/unit/'
    | '/users/'
    | '/zh/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NotFoundComponentLazyRoute: typeof NotFoundComponentLazyRoute
  UsersUsernameRoute: typeof UsersUsernameRoute
  EnPhrasesLazyRoute: typeof EnPhrasesLazyRoute
  EnIndexLazyRoute: typeof EnIndexLazyRoute
  EsIndexLazyRoute: typeof EsIndexLazyRoute
  FrIndexLazyRoute: typeof FrIndexLazyRoute
  ItIndexLazyRoute: typeof ItIndexLazyRoute
  JaIndexLazyRoute: typeof JaIndexLazyRoute
  PronounsIndexLazyRoute: typeof PronounsIndexLazyRoute
  PtIndexLazyRoute: typeof PtIndexLazyRoute
  UnitIndexLazyRoute: typeof UnitIndexLazyRoute
  UsersIndexLazyRoute: typeof UsersIndexLazyRoute
  ZhIndexLazyRoute: typeof ZhIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NotFoundComponentLazyRoute: NotFoundComponentLazyRoute,
  UsersUsernameRoute: UsersUsernameRoute,
  EnPhrasesLazyRoute: EnPhrasesLazyRoute,
  EnIndexLazyRoute: EnIndexLazyRoute,
  EsIndexLazyRoute: EsIndexLazyRoute,
  FrIndexLazyRoute: FrIndexLazyRoute,
  ItIndexLazyRoute: ItIndexLazyRoute,
  JaIndexLazyRoute: JaIndexLazyRoute,
  PronounsIndexLazyRoute: PronounsIndexLazyRoute,
  PtIndexLazyRoute: PtIndexLazyRoute,
  UnitIndexLazyRoute: UnitIndexLazyRoute,
  UsersIndexLazyRoute: UsersIndexLazyRoute,
  ZhIndexLazyRoute: ZhIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notFoundComponent",
        "/users/$username",
        "/en/phrases",
        "/en/",
        "/es/",
        "/fr/",
        "/it/",
        "/ja/",
        "/pronouns/",
        "/pt/",
        "/unit/",
        "/users/",
        "/zh/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/notFoundComponent": {
      "filePath": "notFoundComponent.lazy.tsx"
    },
    "/users/$username": {
      "filePath": "users/$username.tsx"
    },
    "/en/phrases": {
      "filePath": "en/phrases.lazy.tsx"
    },
    "/en/": {
      "filePath": "en/index.lazy.tsx"
    },
    "/es/": {
      "filePath": "es/index.lazy.tsx"
    },
    "/fr/": {
      "filePath": "fr/index.lazy.tsx"
    },
    "/it/": {
      "filePath": "it/index.lazy.tsx"
    },
    "/ja/": {
      "filePath": "ja/index.lazy.tsx"
    },
    "/pronouns/": {
      "filePath": "pronouns/index.lazy.tsx"
    },
    "/pt/": {
      "filePath": "pt/index.lazy.tsx"
    },
    "/unit/": {
      "filePath": "unit/index.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    },
    "/zh/": {
      "filePath": "zh/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
